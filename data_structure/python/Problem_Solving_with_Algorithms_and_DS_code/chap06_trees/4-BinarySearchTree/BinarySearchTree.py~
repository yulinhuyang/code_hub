from TreeNode import TreeNode

class BinarySearchTree:

	def __init__(self):
		self.root = None
		self.size = 0

	def length(self):
		return self.size

	def __len__(self):
		return self.size

	def __iter__(self):
		return self.root.__iter__()

	def put(self,key,val):
		if self.root:
			self._put(key,val,self.root)
		else:
			self.root = TreeNode(key,val)
		self.size = self.size + 1

	def _put(self,key,val,currentNode):
		if key < currentNode.key:
			self._put(key,val,currentNode.leftChild)
		elif key == currentNode.key:
			currentNode.replaceNodeData(key,val,
                                currentNode.leftChild,currentNode.rightChild)
		else:
			if currentNode.hasRightChild():
				self._put(key,val,currentNode.rightChild)
			else:
				currentNode.rightChild = TreeNode(key,
                                                val,parent=currentNode)

	def __setitem__(self,k,v):
		self.put(k,v)

	def get(self,key_):
		if self.root:
			res = self._get(key,self.root)
			if res:
				return res.payload
			else:
				return None
		else:
			return None

	def _get(self,key,currentNode):
		if not currentNode:
			return None
		elif currentNode.key == key:
			return currentNode
		elif key < currentNode.jey:
			return self._get(key,currentNode.leftChild)
		else:
			return self._get(key,currentNode.rightChild)

	def __getitem__(self,key):
		return self.get(key)

	def __contains__(self,key):
		if self._get(key,self.root):
			return True
		else:
			return False

	def delete(self,key):
		if self.size > 1:
			nodeToRemove = self._get(key,self.root)
			if nodeToRemove:
				self.remove(nodeToRemove)
				self.size = self.size-1
			else:
				raise KeyError('Error, key not in tree')
		elif self.size == 1 and self.root.key == key:
			self.root = None
			self.size = self.size - 1
		else:
			raise KeyError('Error, key not in tree')

	def __delitem__(self,key):
		self.delete(key)
                


