## 题目描述

```
给定范围 [m, n]，其中 0 <= m <= n <= 2147483647，返回此范围内所有数字的按位与（包含 m, n 两端点）。

示例 1: 

输入: [5,7]
输出: 4
示例 2:

输入: [0,1]
输出: 0

```

## 前置知识

- 位运算


因此我们的思路就是， 求出这个数字区间的数字前多少位都是1了，那么他们求与的结果一定是前几位数字，然后后面都是0.


## 关键点解析


- n个连续数字求与的时候，前m位都是1

- 可以用递归实现， 个人认为比较难想到

- bit 运算

代码：

```js

(n > m) ? (rangeBitwiseAnd(m/2, n/2) << 1) : m;

```

> 每次问题规模缩小一半， 这是二分法吗？



Python Code:

```python
class Solution:
    def rangeBitwiseAnd(self, m: int, n: int) -> int:
        cnt = 0
        while m != n:
            m >>= 1
            n >>= 1
            cnt += 1

        return m << cnt